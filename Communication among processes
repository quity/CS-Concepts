http://pages.cs.wisc.edu/~adityav/Evaluation_of_Inter_Process_Communication_Mechanisms.pdf

IPC :

SOCKET COMMUNICATION :

Socket programs are used to communicate between various processes usually running on different systems. 
It is mostly used to create a client-server environment.


PUB-SUB Model :

In software architecture, publish–subscribe is a messaging pattern where senders of messages, called publishers, do not program the 
messages to be sent directly to specific receivers, called subscribers, but instead categorize published messages into classes without 
knowledge of which subscribers, if any, there may be. Similarly, subscribers express interest in one or more classes and only receive 
messages that are of interest, without knowledge of which publishers, if any, there are.

MESSAGE QUEUES :

A message queue is a linked list of messages stored within the kernel and identified by a message queue identifier. A new queue is created or 
an existing queue opened by msgget().
New messages are added to the end of a queue by msgsnd(). Every message has a positive long integer type field, a non-negative length, and 
the actual data bytes (corresponding to the length), all of which are specified to msgsnd() when the message is added to a queue. 
Messages are fetched from a queue by msgrcv(). 
We don’t have to fetch the messages in a first-in, first-out order. Instead, we can fetch messages based on their type field.


Ref : https://www.geeksforgeeks.org/ipc-using-message-queues/

The choice of IPC mechanism boils down to making, three primary considerations:

A:) Transfer buffer size and data mechanism.

B:) Memory allocation mechanism.

C:) Locking principal.

Linux offers 17 different IPC mechanisms, namely:

Signals
Anonymous Pipes
Named Pipes or FIFOs
SysV Message Queues
POSIX Message Queues
SysV Shared memory
POSIX Shared memory
SysV semaphores
POSIX semaphores
FUTEX locks
File-backed and anonymous shared memory using mmap
UNIX Domain Sockets
Netlink Sockets
Network Sockets
Inotify mechanisms
FUSE subsystem
D-Bus subsystem
Personally, if size of data is small I use Named Pipes. If size of data is large, I use Unix Domain Sockets for better throughput. Overall, Unix Domain sockets are the safest bet for any IPC.


*******************************************************
 shared memory to be the fastest form of IPC because all processes share the same piece of memory, hence we avoid copying data between process memory and kernel memory. Access to this memory is similar to any memory reference and does not need 
special system support like system calls. It also permits multiple (>2) processes to perform bi-directional communication. 
However, the biggest caveat of shared memory
is that the system offers no synchronization guarantees. The user processes need to coordinate their accesses into
the shared region. This is a potential security threat as well.



Pipes offer a flexible and fast way for communication
between two processes. Each pipe is uni-directional,
hence we need two pipes for bidirectional communication.
The UNIX implementation of pipes represents them as
a file, which can easily substitute the stdin or stdout
for a process, offering great programming convenience.
However, the maximum number of pipes per process is
limited to 1024, which is the size of the file-descriptor
table. Pipes offer automatic synchronization through a
reserved kernel buffer.

Sockets allow bidirectional communication, but their performance for IPC on the same machine is quite poor.
Being a packet-based mechanism, sockets may require breaking down large messages into multiple packets, increasing communication latency. However, sockets offer some unique advantages for IPC - sockets can be used for IPC between processes on different machines, allowing scalability for SW growth. Being a standardized mechanism governed by a recognized protocol, sockets
are very useful for connecting with and testing unknown
or opaque processes (black boxes). Hence, one can recognize that each IPC mechanism offers unique advantages
which render them useful for different use-cases.
